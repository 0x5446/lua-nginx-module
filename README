Name
    lua-nginx-module - embed power of Lua into NginX

Status
    This module is at its very early phase of development and
    consideredehighly experimental. But you're encouraged to
    test it out on your side and report any quirks that you
    experience.

    We need your help! If you find this module useful and/or
    interesting, please consider joining the development!
    Commit bit can be freely delivered at your request ;)

Synopsis

   # set search paths for pure Lua external libraries:
   lua_package_path '/foo/bar/?.lua;/blah/?.lua';

   # set search paths for Lua external libraries written in C:
   lua_package_cpath '/bar/baz/?.so;/blah/blah/?.so';

   server {
        location /inline_concat {
            # MIME type determined by default_type:
            default_type 'text/plain';

            set $a "hello";
            set $b "world";
            # inline lua script
            set_by_lua $res "return ngx.arg[1]..ngx.arg[2]" $a $b;
            echo $res;
        }

        location /rel_file_concat {
            set $a "foo";
            set $b "bar";
            # script path relative to nginx prefix
            # $ngx_prefix/conf/concat.lua contents:
            #
            #    return ngx.arg[1]..ngx.arg[2]
            #
            set_by_lua_file $res conf/concat.lua $a $b;
            echo $res;
        }

        location /abs_file_concat {
            set $a "fee";
            set $b "baz";
            # absolute script path not modified
            set_by_lua_file $res /usr/nginx/conf/concat.lua $a $b;
            echo $res;
        }

        location /lua_content {
            # MIME type determined by default_type:
            default_type 'text/plain';

            content_by_lua "ngx.say('Hello,world!')"
        }

        location /nginx_var {
            # MIME type determined by default_type:
            default_type 'text/plain';

            # try access /nginx_var?a=hello,world
            content_by_lua "ngx.print(ngx.var['arg_a'], '\\n')";
        }

        # transparent non-blocking I/O in Lua via subrequests
        location /lua {
            # MIME type determined by default_type:
            default_type 'text/plain';

            content_by_lua '
                local res = ngx.location.capture("/some_other_location")
                if res.status == 200 then
                    ngx.print(res.body)
                end';
        }

        # GET /recur?num=5
        location /recur {
            # MIME type determined by default_type:
            default_type 'text/plain';

           content_by_lua '
               local num = tonumber(ngx.var.arg_num) or 0
               ngx.say("num is: ", num)

               if num > 0 then
                   res = ngx.location.capture("/recur?num=" .. tostring(num - 1))
                   ngx.print("status=", res.status, " ")
                   ngx.print("body=", res.body)
               else
                   ngx.say("end")
               end
               ';
        }

Description

APIs
    Nginx APIs for set_by_lua*
        value = ngx.var.some_nginx_variable_name
        ngx.var.some_nginx_variable_name = value
        value = ngx.arg[n]

    Nginx APIs for content_by_lua*
        value = ngx.var.some_nginx_variable_name
        ngx.var.some_nginx_variable_name = value
        value = ngx.HTTP_OK
        value = ngx.HTTP_CREATED
        value = ngx.HTTP_MOVED_PERMANENTLY
        value = ngx.HTTP_MOVED_TEMPORARILY
        value = ngx.HTTP_NOT_MODIFIED
        value = ngx.HTTP_BAD_REQUEST
        value = ngx.HTTP_GONE
        value = ngx.HTTP_NOT_FOUND
        value = ngx.HTTP_NOT_ALLOWED
        value = ngx.HTTP_FORBIDDEN
        value = ngx.HTTP_INTERNAL_SERVER_ERROR
        value = ngx.HTTP_SERVICE_UNAVAILABLE

        print(a, b, ...) -- emit args concatenated to error.log

        ngx.send_headers() -- explicitly send headers

        ngx.print(a, b, ...) -- emit args concatenated to the HTTP client
                -- (as response body)

        ngx.say(a, b, ...) -- just as ngx.print but also emit a trailing newline

        ngx.flush() -- force flushing the response outputs

        ngx.throw_error(status) -- throw out an error page and interrupts
                -- the execution of the current Lua thread,
                -- status can be ngx.HTTP_NOT_FOUND or other
                -- HTTP status numbers

        ngx.eof() -- explicitly specify the end of the response output stream

        newstr = ngx.escape_uri(str) -- escape str as a URI component

        newstr = ngx.unescape_uri(str) -- unescape str as a escaped URI component

        res = ngx.location.capture(uri) -- issue a synchronous but still
                -- non-blocking subrequest using uri (for example, /foo/bar)
                -- returns a Lua table with two slots,
                -- i.e., res.status and res.body.

Performance
    The Lua state (aka the Lua vm instance) is shared across all the requests
    handled by a single nginx worker process to miminize memory use.

    On a ThinkPad T400 2.96 GHz laptop, it's easy to achieve 25k req/sec using ab w/o keepalive
    and 37k+ req/sec with keepalive.

    It's also possible to make this module work with LuaJIT 2.0
    by manually updating the "config" file by
    replacing "-llua" with "-lluajit".

Installation
    1. Install lua into your system. At least Lua 5.1 is required.

    Lua can be obtained freely from its project homepage:

        http://www.lua.org/

    2. Download the latest version of the release tarball of this module from
    lua-nginx-module file list
    (<http://github.com/chaoslawful/lua-nginx-module/downloads>).

    3. Grab the nginx source code from nginx.net (<http://nginx.net/>), for
    example, the version 0.8.41 (see nginx compatibility), and then build
    the source with this module:

        $ wget 'http://sysoev.ru/nginx/nginx-0.8.41.tar.gz'
        $ tar -xzvf nginx-0.8.41.tar.gz
        $ cd nginx-0.8.41/

        # Here we assume you would install you nginx under /opt/nginx/.
        $ ./configure --prefix=/opt/nginx \
            --add-module=/path/to/ndk_devel_kit \
            --add-module=/path/to/echo-nginx-module \
            --add-module=/path/to/lua-nginx-module

        $ make -j2
        $ make install

    2. Download the latest version of the release tarball of this module from
    lua-nginx-module file list
    (<http://github.com/chaoslawful/lua-nginx-module/downloads>).

Compatibility
    The following versions of Nginx should work with this module:

    *   0.8.x (last tested version is 0.8.47)

    *   0.7.x >= 0.7.46 (last tested version is 0.7.67)

    Earlier versions of Nginx like 0.6.x and 0.5.x will *not* work.

    If you find that any particular version of Nginx above 0.7.44 does not
    work with this module, please consider reporting a bug.

TODO

Known Issues

See Also

    * ngx_devel_kit ( http://github.com/simpl-it/ngx_devel_kit )
    * echo-nginx-module ( http://github.com/agentzh/echo-nginx-module )

Authors
    chaoslawful (王晓哲) <chaoslawful at gmail dot com>

    agentzh (章亦春) <agentzh at gmail dot com>

Copyright & License
    This module is licenced under the BSD license.

    Copyright (c) 2009, Taobao Inc., Alibaba Group ( http://www.taobao.com ).

    Copyright (C) 2009 by Xiaozhe Wang (chaoslawful) <chaoslawful@gmail.com>.

    Copyright (C) 2009 by Yichun Zhang (agentzh) <agentzh@gmail.com>.

    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:

        * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.

        * Neither the name of the Taobao Inc. nor the names of its
        contributors may be used to endorse or promote products derived from
        this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
    A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
    HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
    TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
    LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
